#!/usr/bin/env zsh

PATH=/opt/homebrew/bin:$PATH
DEFAULT_COMMAND="zsh"
DIRECTORY="$HOME/.dtach"
SOCKET=

attach()
{
    SOCKET=$1
    dtach -A $SOCKET -z -r winch $DEFAULT_COMMAND
    cleanup
}

case $# in
    1)
        COMMAND=$DEFAULT_COMMAND
        ;;
    2)
        COMMAND=$2
        ;;
    *)
        echo "Usage: $0 name [command]"
        exit 1
        ;;
esac

BASEDIR="$DIRECTORY/$1"
LOCK_FILE="$BASEDIR/.lock"

mkdir -p $BASEDIR

trap "cleanup" SIGHUP SIGINT SIGTERM

cleanup()
{
    mv -f $SOCKET $SOCKET:r.detached 2> /dev/null
    rm -f "$LOCK_FILE"
    exit
}

# noclobber prevents the '>' from overwriting an existing lock file.
while ! (set -o noclobber; echo $$ > "$LOCK_FILE"); do
  echo "$BASEDIR is already locked by the process with the PID \
$(cat "$LOCK_FILE"). Remove $LOCK_FILE to unlock manually. \
Trying again in 0.1 s."
  sleep 0.1
done

# arrays
DET_SOCKETS=($=`echo ${BASEDIR}/*.detached`) 2> /dev/null
SOCKETS=($=`echo ${BASEDIR}/*`) 2> /dev/null

if [ $#DET_SOCKETS -gt 0 ]; then
    SOCKET=$DET_SOCKETS[1]:r.attached
    echo "mv $DET_SOCKETS[1] $SOCKET"
    mv $DET_SOCKETS[1] $SOCKET
    rm -f "$LOCK_FILE"
    attach $SOCKET
else
    i=0
    while [ true ]; do
        if [ $#SOCKETS -ne 0 -a $SOCKETS[(i)$BASEDIR/$i.(detached|attached)] -le $#SOCKETS ]; then
            let i++
        else
            rm -f "$LOCK_FILE"
            attach $BASEDIR/$i.attached
        fi
    done
fi
